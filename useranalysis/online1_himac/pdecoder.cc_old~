#include "myanalysis.cc"
#include <stdint.h>

int CFD_delay=1;//in Tclk unit, 1 Tclk=2ns
double CFD_fraction=0.5;
double LED_threshold=100;
double LED_threshold_LED=100;
int gateOffset=10;
int shortGate=20;
int longGate=150;
int nBaseline=16;
int minVarBaseline=100; //criteria for baseline determination
int mode_selection=2;

//! dont care about the following code
uint16_t seperateint(int inint,bool islsb){
  if (islsb) return (uint16_t) (inint&0xFFFF);
  else return (uint16_t) (inint>>16);
}

NIGIRIHit* data;

int init_done = 0;
int pinit()
{
  if (init_done) return 1;
  init_done = 1;
  gROOT->ProcessLine(".L libDataStruct.so");
  data = new NIGIRIHit;
  Init();
  return 0;
}

int process_event (Event * e)
{  
  Packet *p1[V1730_N_MAX_BOARD];
  for(int pk=0;pk<V1730_N_MAX_BOARD;pk++){
    p1[pk]= e->getPacket(pk);
    if (p1[pk])
      {            
        int* temp;
        int* gg;
        gg=(int*) p1[pk]->getIntArray(temp);
        int size=p1[pk]->getPadding();
        //! content
        int k=V1740_HDR+V1740_N_MAX_CH; 
        for (int i=0;i<V1730_N_MAX_CH;i++){
          //! header
          data->Clear();
          data->evt_type = V1730_EVENT_TYPE;
          data->b = pk;//for sorter
          data->evt = gg[2]+1;//this event start from 0
          data->overrange = (Char_t) gg[1];//intepret as channel(group) mask
          UInt_t tslsb = (UInt_t)gg[5];
          UInt_t tsmsb = (UInt_t)gg[4];
          data->ts = (((ULong64_t)tsmsb<<32)&0xFFFF00000000)|(ULong64_t)tslsb;//resolution is 16 ns!
          data->ch = i;//for sorter

          int nsample = gg[i+V1740_HDR];
          data->nsample = nsample;		  
          UShort_t WaveLine[nsample];
          int ispl = 0;	  	 
	  
          for (int j=0;j<nsample/2+nsample%2;j++){
            if (ispl<nsample) {	      
                WaveLine[ispl]=gg[k]&0xFFFF;
                data->pulse.push_back(gg[k]&0xFFFF);
            }
            ispl++;
            if (ispl<nsample) {
                WaveLine[ispl]=(gg[k]>>16)&0xFFFF;
                data->pulse.push_back((gg[k]>>16)&0xFFFF);
            }
            ispl++;
            k++;
          }	  
	  
          if (nsample>NSBL){
              dpp *oj=new dpp(nsample,WaveLine);
              oj->baselineMean(nBaseline,minVarBaseline);
              double timeData = 0;
              int cShort,cLong;
	      cLong = 0;
	      cShort = 0;
              if (mode_selection==0) {                  
		  timeData=oj->led(LED_threshold_LED);	
              }else if (mode_selection==1) {
                  timeData=oj->ledWithCorr(LED_threshold);
              }else if (mode_selection==2){
                  oj->makeCFD(LED_threshold,CFD_delay,CFD_fraction);
                  timeData=oj->cfdFast();
              }else if (mode_selection==3){
                  oj->makeCFD(LED_threshold,CFD_delay,CFD_fraction);
                  timeData=oj->cfdSlow();
              }

              if (timeData>0) oj->chargeInter(cShort,cLong,timeData,gateOffset,shortGate,longGate);	      
              data->cshort = cShort;
              data->clong = cLong;
              data->baseline = oj->bL;
              data->finets = timeData;
              delete oj;
          }
	  
          //! Do sort!
          ProcessEvent(data);
        }//end while
	delete p1[pk];
      }  
  }//loop all packet


  //! v1740 packet
  Packet *p1740=e->getPacket(V1740_PACKET);
  if (p1740)
    {
      int* temp;
      int* gg;
      gg=(int*) p1740->getIntArray(temp);
      int size=p1740->getPadding();
      //! content
      int k=V1740_HDR+V1740_N_MAX_CH; 
      for (int i=0;i<V1740_N_CH;i++){
        //! header
        data->Clear();
        data->evt_type = V1740_EVENT_TYPE;
        data->b = V1740_BOARD_N+i/V1730_N_MAX_CH;//for sorter
        data->evt = gg[2]+1;//this event start from 0
        data->overrange = (Char_t) gg[1];//intepret as channel(group) mask
        UInt_t tslsb = (UInt_t)gg[5];
        UInt_t tsmsb = (UInt_t)gg[4];
        data->ts = (((ULong64_t)tsmsb<<32)&0xFFFF00000000)|(ULong64_t)tslsb;//resolution is 16 ns!
        data->ch = i;//%V1730_N_MAX_CH;//for sorter

        int nsample = gg[i+V1740_HDR];
        data->nsample = nsample;
        UShort_t WaveLine[nsample];
	
	
        int ispl = 0;
        for (int j=0;j<nsample/2+nsample%2;j++){
          if (ispl<nsample) {
              WaveLine[ispl]=gg[k]&0xFFFF;
              data->pulse.push_back(gg[k]&0xFFFF);

          }
          ispl++;
          if (ispl<nsample) {
              WaveLine[ispl]=(gg[k]>>16)&0xFFFF;
              data->pulse.push_back((gg[k]>>16)&0xFFFF);
          }
          ispl++;
          k++;
        }
			
	
        if (nsample>NSBL){
            dpp *oj=new dpp(nsample,WaveLine);
            oj->baselineMean(nBaseline,minVarBaseline);
            double timeData = 0;
            int cShort,cLong;
	    cLong = 0;
	    cShort = 0;

            if (mode_selection==0) {
                timeData=oj->led(LED_threshold_LED);
            }else if (mode_selection==1) {
                timeData=oj->ledWithCorr(LED_threshold);
            }else if (mode_selection==2){
                oj->makeCFD(LED_threshold,CFD_delay,CFD_fraction);
                timeData=oj->cfdFast();
            }else if (mode_selection==3){
                oj->makeCFD(LED_threshold,CFD_delay,CFD_fraction);
                timeData=oj->cfdSlow();
            }

            if (timeData>0) oj->chargeInter(cShort,cLong,timeData,gateOffset,shortGate,longGate);
            data->cshort = cShort;
            data->clong = cLong;
            //cout<<cLong<<endl;
            data->baseline = oj->bL;
            data->finets = timeData;
            delete oj;
        }
	
	
        //! Do sort!
	ProcessEvent(data);
	/*
	  if (gg[2]==1000) {
	    for (int ii=0;ii<2;ii++) cout<<i<<" "<<nsample<<" "<<ii<<" "<<WaveLine[ii]<<endl;
	    for (int ii=nsample-3;ii<nsample;ii++) cout<<i<<" "<<nsample<<" "<<ii<<" "<<WaveLine[ii]<<endl;
	  }
	*/
      }
       delete p1740;
  }

  //! tdc packet
  Packet *tdcp=e->getPacket(TDC_PACKET);
  if(tdcp){
      int* temp;
      int* gg;
      gg=(int*) tdcp->getIntArray(temp);
      int size=tdcp->getPadding();
      data->Clear();
      data->evt_type = TDC_EVENT_TYPE;
      data->b = TDC_BOARD_N;
      data->ch = 0;
      UInt_t tslsb = (UInt_t)gg[3];
      UInt_t tsmsb = (UInt_t)gg[2];
      data->ts = (((ULong64_t)tsmsb<<32)&0xFFFF00000000)|(ULong64_t)tslsb;//resolution is 16 ns!
      data->clong= gg[1];//daq counter
      data->evt = gg[0];
      //! more tdc data here!
      int nword = 0;
      for (int i=4;i<size;i++){
          if((gg[i]&0xF8000000)>>27==0x00){//! tdc measurement word
              UShort_t ch =(UShort_t)((gg[i]&0x3F80000)>>19);
              Int_t t = (Int_t)(gg[i]&0x7FFFF);
              data->AddTDCHit(ch,t);
              //cout<<"tdc ch "<<std::dec<<tdc->ch<<" - tdc t "<<tdc->t<<std::dec<<endl;
          }
          //! when global trailer met
          nword++;
          if((gg[i]&0xF8000000)>>27==0x10)
              break;
      }
      ProcessEvent(data);
      delete tdcp;
  }
  return 0;
}

int pclose(){
    CloseMe();
    cout<<"Finish!"<<endl;
    return 0;
}


