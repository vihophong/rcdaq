/**@name The Message system user guide


   \begin{center}
   {\Large{\bf The Message system user guide}} \\
   \end{center}

   @memo        Martin L Purschke \\
                Physics Departement 510C \\ 
                Brookhaven National Laboratory \\
                Upton, NY 11973-5000 \\
                USA \\
                email: purschke@bnl.gov \\

                January 25, 1999


   @version     1.01


 */
//@{

/**@name Why a message system?

If you have used different software packages, you may have seen
different {\em message systems}, which attempt to provide a coherent
way of dealing with messages from the software, such as warnings,
informational output, error messages, help text, and so on.  In most
cases, this is done through some variation of a dedicated message
interface, such as the following, which is taken from STAF:
\begin{verbatim}
EML_MESSAGE("DUI:Initializing. ");
EML_MESSAGE("DUI:Starting. ");	
\end{verbatim} 

The idea is that you can, at the application level, decide
what to do with certain types of messages. For example, you can switch
warnings off completely, or send them to a different destination than
informational messages, and so on. The C and C++ system itself
provides you with "standard input" and "standard error"; the above
approach takes this concept further to a larger number of different
message categories.


This approach, however, has a number of problems. 

\begin{itemize}
\item
It forces you to route every message through the message
handler or messages will still end up in the log files or on the
screen, and can go unnoticed for a long time. It is the user (rather
than the system) who must take special action to funnel the message
through the message system.

\item
Also, once you adopt a given standard of message handling such as the
one above, you are committed to providing the ``EML\_'' libraries
whereever the code is used. If you use more than one package, you may
find that the message handlers are incompatible and take a lot of
tweaking to get the job right.

\item
Also, in order to change the behavior of a message handler, you will typically 
need to relink your application with another library which implements 
the ``EML\_'' library in the desired way.

\item 

Finally, the interface to the ``EML\_'' functions, having a fixed
number of parameters, are not as flexible as the interfaces to cout,
cerr, or printf. In practice you might be forced to output through
sprintf to a string, which you then pass on to the message system. You
would like the same flexibility (number of parameters, formatting) with the
messaging system interfaces.

\end{itemize}


This message system which is used for PHENIX tries to eliminate the
latter shortcomings. 

\begin{itemize}
\item
It intercepts {\em all} output generated by cout, 
cerr, and printf and forces it to be routed through the handler without 
explicit action by the user. There is no way a message can end up in the log files
unintentionally. 

\item On the application level, it modifies the behavior of the
standard cout, cerr, and printf methods. So this package will run fine
in an unmodified environment without any special message handler in
place.

\item 
The behavior of the message handler is implemented in a (C++) class,
so the behavior can be changed dynamically either by modifying the
behavior of the object, or by replacing the handler object with a
different one.  In either way the behavior can be changed at run-time.

\item Since the standard cout and printf interfaces are used, we
retain the full formatting capability.

\end{itemize}

*/


/**@name Message profiles

The user can ``tag'' each individual message with a {\em
profile}. This is in essence a set of properties which accompany a
given message, and give information about the source (origin), type of
message, and severity of the message. The number of such properties is
not hard-coded, although three properties are the standard in
PHENIX. A message without an explicit profile will get a default one
which the user can specify globally. 

So for a given message, the source could be the event builder, the
type a run-time message, and the severity ``warning''. It is useful to
distinguish run-time messages such as ``Could not open file'' from
another category ``code debug'', which tells about genuine bugs in the
code (such as ``division by 0'').

The standard system comes with a set of somewhat arbitrary
categories. These are not hard-coded, in fact, they could be different
on an application by application basis.

*/

/**@name The Implementation

This message system makes use of the fact that the output from a C++
program is handled by the cout object. This is an object of type
ostream, and is provided by the C++ system. It is important to note
that the cout object is merely the formatting engine which assembles a
string from the input parameters. The actual output is handled by yet another object 
of class streambuf. So if there is a statement like
\begin{verbatim}
	int i = 5;
	cout << "This is a message " << i << endl;
\end{verbatim} 
the cout object will take care of all the formatting and will end up with a string
\begin{verbatim}
This is a message 5
\end{verbatim} 
which is then handed off to the streambuf object to be sent to the standard output.

The cout object comes with a ready-made streambuf object which will
talk to standard output. However, at runtime you can give cout another
object of type streambuf to use instead, one which will treat the
output the way you want. This streambuf object is not at all involved
in formatting the output, all this is already taken care of by cout
itself. The streambuf object is only responsible with delivering the
message to its destination.

So this is the way our message handler works:

\begin{enumerate}
 \item We create an instance of our custom message handler class which
inherits from streambuf and can as such replace cout's original streambuf.

\item
In its constructor, it establishes itself as cout's new streambuf object. It preserves
a pointer to the original streambuf, so it can undo its action later by re-establishing 
cout's original streambuf.

\item Each time the <<endl function is invoked on cout, cout will call
a member function of its streambuf object (now our custom-made object) to 
request that the preformatted output string be disposed of. It is here that we get 
hold of the fully formatted string and can deal with it in whatever way we need.

\item
If we delete the custom streambuf object, it  re-establishes the original streambuf 
which cout had when we created our streambuf object.
 
\end{enumerate} 


*/


/**@name Specifying message profiles

So far, we have achieved that all output is  funneled through our custom
streambuf. We will see now how we can tag on the message profiles. The
idea is that we prepend the actual output we want to appear at some
destination with a tag. This  works much like a marginal note on a
typed manuscript which directs the typesetter to format the manuscript
in a given way, such as "Start a new page here" or "write this in
boldface". In the same way, we prepend our message with a short string meant
for our custom streambuf. Our custom streambuf object then sifts
through the string it was given by cout, looks if there is any profile
information, interprets it, and strips the ``marginal note'' off,
leaving only the original string for output.


The user creates objects of type msg\_control, which correspond to
given profiles. In this example we create a error message used by the
time-of-flight system, severity "error", type ``code debug'':

\begin{verbatim}
  msg_control *tof_error = new msg_control(MSG_TYPE_CODEDEBUG,
                                             MSG_SOURCE_TOF, 
                                             MSG_SEV_ERROR);
  cout <<  *tof_error   << " this is an error message from TOF"  << endl;

\end{verbatim} 

The 3 parameters happen to be enumerated as  5, 7, and 2, respectively. 

Our streambuf object will receive a string 
\begin{verbatim}
<| 5| 7| 2|> this is an error message from TOF
\end{verbatim} 

It will find the tokens, interpret the 3 numbers, strip the whole prepended 
tag ("<| 5| 7| 2|>") off, and deal with the original string based on what the profile is. 

If our message did not have a profile, the streambuf will assign a default one. 

You may wonder now how we prevent the tagged-on information from
clobbering our output if we do not have a custom streambuf that could 
strip it off.

The ``msg\_control'' objects we generate are completely silent if
there is no custom streambuf in place. When we create such a
streambuf, it talks to the msg\_control objects and activates them, and 
when we delete it, it deactivates them again. So
only if we have a custom streambuf in place (which will interpret and
strip off the additional profile tag), this tag is actually produced.

*/

/**@name Existing Streambuf classes

Up to now (April 1999) we have used this messaging system to tag
different messages and to filter them with an standard object of class
``filter\_msg\_buffer''.  The custom streambuf will filter the
messages (that is, drop some of them based on their profile), but then
forward the remaining ones to cout's original streambuf, that is, the
standard output of the application. In the future, we will have
different streambuf objects which route (in the PHENIX countinghouse)
all not-filtered messages to a central message handler process, which
will log them to a central file and maybe trigger certain actions on
receipt of certain messages. We might devise severity levels which
trigger immediate operator intervention, or trigger specific experts
to be paged. For now we typically use the system to just filter
messages away from standard output. 

In practice we have an abstract class msg\_buffer (which inherits from
streambuf, so it can replace cout's original  streambuf object). This class,
which is meant to be sub-classed, provides the standard means of parsing 
the output from msg\_control to
learn about the profile. Unless you want to change the amount of
profile information, all actual classes can inherit from this
msg\_control class and in this way inherit the standard profile
management. The only thing the subclass (such as filter\_msg\_buffer)
needs to provide is the actual code which does the filtering or, in
the future, dispatches messages differently based on their profile. As
long as the custom streambuf inherits from msg\_streambuf, it will
automatically be able to deal with the output from the msg\_control
classes.

*/

/**@name The filter\_msg\_buffer Class

The filter\_msg\_buffer class is the current workhorse class for the
messaging system.  It will, as described above, filter (drop) messages
with certain profiles and let others pass. There is a set of member
functions which allow to customize the behavior at run-time. It is
possible to specify for each single combination whether a message with
that profile is allowed to pass, and there are global set functions
which will enable or disable whole groups of messages. In practice,
you will typically disable whole groups (or even all messages) first
and then selectively enable those which you are interested in.

There is one notable change from version 1.0.
In the past, an ``unspecified'' message (one that came without
explicit profile) was considered to be on the same footing as ``informational''
in the ranking of severities, and was switched off with a
set\_below\_threshold(MSG\_SEV\_WARNING,OFF) call (because
``informational'' is below ``warning'' severity). It was found that
many programs want to output profile-less help text, command prompts
and such, and you had to explicitly re-enable that after the
set\_below\_threshold call. From now on the unspecified messages are
excempt from many global operations, such as the above-mentioned
"set\_below\_threshold" function. 
You can still disable the unspecified
messages with the set\_type call, but it will no longer be affected by
the global set functions.

Note that profiles are only supported when you use cout; all output generated
with printf is considered unspecified. 
 

*/


/** @name Some Examples

We have a few examples which can also be found in the example directory. At the
core is a fictitious ``detectorcode'' function which produces messages with various 
profiles and also through printf. The idea is that this function is compiled once and then
linked with different applications, which have established different custom streambufs 
to filter or customize the output. The ``detectorcode.cc'' file looks like this:
\begin{verbatim} 
//@Include: ../examples/detectorcode.cc
\end{verbatim}

This can be linked with an application wihich does not have any specialized message 
handling environment (``x1.cc''):
\begin{verbatim} 
//@Include: ../examples/x1.cc
\end{verbatim}
which produces
\begin{verbatim} 
> ./x1
 this is a info messsge from MVD (1)
 this is a warning from MVD (2)
 this is an error from MVD (3)
 this is another info message from MVD (4)
 this is an error message from TOF (5)
 this is an unspecified message (6)
 this is a message through printf (7)
>
\end{verbatim}

The next example (x2.cc) defines a filter\_msg\_buffer, but does not filter 
anything.
\begin{verbatim} 
//@Include: ../examples/x2.cc
\end{verbatim}
So the output looks exactly as before. In the next example, x3.cc, we actually
activate the filter and filter out 2 profiles (which match the profiles of messages
number 1, 2 and 4 above):
\begin{verbatim} 
//@Include: ../examples/x3.cc
\end{verbatim}
\begin{verbatim} 
> ./x3
 this is an error from MVD (3)
 this is an error message from TOF (5)
 this is an unspecified message (6)
 this is a message through printf (7)
>
\end{verbatim}

In the next example (x4.cc) we first switch all messages off, and then enable 
error messages from TOF again. Note that this global switch does {\em not}
switch off the unspecified messages (that came without profile):
\begin{verbatim} 
//@Include: ../examples/x4.cc
\end{verbatim}
\begin{verbatim} 
> ./x4 
 this is an error message from TOF (5)
 this is an unspecified message (6)
 this is a message through printf (7)
> 
\end{verbatim}

Finally, we show in example 5 (x5.cc) that we can dynamically, at
run-time, establish different custom streambuf's, delete them again,
and establish another one.  We call the detectorcode() function three
times, once with the already well-known filter\_msg\_buffer, then without (we delete
the object, so it re-establishes the original streambuf cout came with), and then
we establish a different custom one, a ``date\_filter\_msg\_buffer'' which in addition to 
filtering, also prepends a time tag to messages with a profile.
\begin{verbatim} 
//@Include: ../examples/x5.cc
\end{verbatim}
\begin{verbatim} 
> ./x5
 this is an error message from TOF (5)
 this is an unspecified message (6)
 this is a message through printf (7)
 -------------------
 this is a info message from MVD (1)
 this is a warning from MVD (2)
 this is an error from MVD (3)
 this is another info message from MVD (4)
 this is an error message from TOF (5)
 this is an unspecified message (6)
 this is a message through printf (7)
 -------------------
Wed Apr 21 18:18:31 1999:  this is a info message from MVD (1)
Wed Apr 21 18:18:31 1999:  this is a warning from MVD (2)
Wed Apr 21 18:18:31 1999:  this is an error from MVD (3)
Wed Apr 21 18:18:31 1999:  this is another info message from MVD (4)
Wed Apr 21 18:18:31 1999:  this is an error message from TOF (5)
 this is an unspecified message (6)
 this is a message through printf (7)
 -------------------
>
\end{verbatim}

The first output section is what we already had in example 4. The
second section is like the very first example, without any custom
streambuf; the messages are just coming through the normal standard
output.

The last output section may look odd, but there is logic to it. We do
the standard filtering (that is, none at all, all messages go
through). However, the data\_filter\_message\_buffer prepends a date/time
tag to all output lines {\em except} the ``unspecified'' ones (it
would clobber help texts and even the command prompt of interactive
applications).

Note that the dividing lines (``-----'') are also unspecified messages.

This shows that this message system is a very versatile tool to tailor the message handling
to your needs.


*/

/**@name PHENIX standard definitions

In msg\_profile.h, we specify the current standard set of message
profiles. At any time we can add or modify the list. For types, we
have unspecified, code\_debug, runtime, anmd a few more. The ``source''
identifier essentially runs through the list of subsystesm in the
standard detector order, and has High Voltage, DD system, and Run
control in addition. The severities range from informational through
fatal, and we intend to add some more types (``immediate attention'')
as we see fit.
\begin{verbatim} 
//@Include: ../inc/msg_profile.h
\end{verbatim}



*/


/**@name Reference Manual
*/

   //@{
		//@Include: ../inc/msg_control.h
		//@Include: ../inc/msg_buffer.h
		//@Include: ../inc/filter_msg_buffer.h
		//@Include: ../inc/date_filter_msg_buffer.h
	
   //@}

//@}



